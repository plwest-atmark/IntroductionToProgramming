using System;
using System.Runtime.Serialization;

namespace _11_DesignPattern_Repository.Repository_Design_Pattern
{
    /// <summary>
    /// The Exception Class is found in System Namespace and is developed for creating a
    ///     default "object" that tells us about problems within our program.
    ///     
    /// When any problem occurs within the program, the system will generate an exception object
    ///     at that point that the program has a problem. This object will contain information
    ///     like a "stack trace", messages that tell us what happened and sometimes why it happen.
    ///     This information is generated by the sytem for us, however, there are times
    ///     when we want to create our own exception handling classes for our own program.
    ///     
    /// This is an example of inheriting the System.Exception class to create our own custom exception
    ///     There are a few reasons for this, one being exception filtering. And another, is simply to
    ///     create exception classes that are descriptive of what went wrong.
    ///     
    ///     This Exception is a MemeberNotFoundException and we intentionally throw this exception
    ///     within our program if we do a search for a member and they are not located. This allows
    ///     us to manage the exception as we wish and also allows us to add our own custom message
    ///     and information to the Exception that is being "thrown"
    /// </summary>
    [Serializable]
    internal class MemberNotFoundException : Exception
    {
        /// <summary>
        ///  Setting this constructor to private means that we MUST send a member and a message
        ///     when we create this custom exception.  This can be a good practice when there is
        ///     critical information that is required to be returned with an exception.
        /// </summary>
        private MemberNotFoundException() {} // cannot do anything unless called from inside another constructor
        public MemberNotFoundException(string message) : base(message) // the message is sent the the "Exception" class
        {
        }

        #region Do not worry about these constructors for now.
        public MemberNotFoundException(string message, Exception innerException) : base(message, innerException)
        {
        }

        protected MemberNotFoundException(SerializationInfo info, StreamingContext context) : base(info, context)
        {
        }
        #endregion
    }
}